{"version":3,"sources":["components/Card.js","components/personajesMarvel.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Card","id","image","name","description","className","src","alt","PUBLIC_KEY","TS","Date","now","hash","md5","PersonajesMarvel","useState","characters","setCharacters","useEffect","navigator","onLine","URL","fetch","then","res","json","data","console","log","localStorage","setItem","JSON","stringify","results","getItem","parse","map","element","thumbnail","path","extension","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.2a14422b.chunk.js","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './Card.css'\r\n\r\nexport const Card = ({id, image, name, description}) => {\r\n    return (\r\n        <div id={id} className=\"card\">\r\n            <img src={image} className=\"card-img-top\" alt={name}/>\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{name}</h5>\r\n                <p className=\"card-text\">Description: {description}</p>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}","import { useEffect, useState } from \"react\";\r\nimport {Card} from './Card'\r\nimport md5 from 'md5'\r\n\r\nconst PRIVATE_KEY = '1a79518320092f0adcca9822825517090a22e0fc'\r\nconst PUBLIC_KEY = 'e8e61be1a12aa4da11480c2bb40cbbff'\r\nconst TS = Date.now()\r\nlet hash = md5(`${TS}${PRIVATE_KEY}${PUBLIC_KEY}`)\r\n\r\nfunction PersonajesMarvel(){\r\n    let [characters, setCharacters] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        if(!navigator.onLine){\r\n            if(localStorage.getItem(\"characters\") === null){\r\n                setCharacters(\"Loading...\")\r\n            } else {\r\n                setCharacters(JSON.parse(localStorage.getItem(\"characters\")))\r\n            }\r\n            \r\n        } else {\r\n            const URL = `https://gateway.marvel.com:443/v1/public/characters?ts=${TS}&apikey=${PUBLIC_KEY}&hash=${hash}`\r\n            fetch(URL).then(res=>res.json()).then(data=>{\r\n                console.log(data)\r\n                localStorage.setItem(\"characters\", JSON.stringify(data.data.results))\r\n                setCharacters(data.data.results);\r\n            })\r\n        }        \r\n    },[]);\r\n\r\n    return(\r\n        <div className=\"row g-3\">\r\n            {characters.map( element => \r\n                <div key={element.id} className=\"col col-lg-3\">\r\n                    <Card key={element.id} id={element.id} image = {element.thumbnail.path+'/landscape_small.'+element.thumbnail.extension} name={element.name} description={element.description}></Card>\r\n                </div>\r\n            )}  \r\n        </div>\r\n    )\r\n}   \r\n\r\nexport default PersonajesMarvel;","import React from 'react';\nimport './App.css';\nimport PersonajesMarvel from './components/personajesMarvel'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PersonajesMarvel />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}